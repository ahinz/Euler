package org.hinz.euler

import scala.annotation.tailrec

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

object Solution12 {

  def tri(v:Long=1,idx:Long=2):Stream[Long] = Stream.cons(v,tri(v + idx, idx + 1))

  def divcnt(v: Long):Long =
    divcnt(v, 0, 1, v)

  @tailrec
  def divcnt(v: Long, cnt:Long, cur:Long, limit:Long):Long = 
    if (cur >= limit) cnt * 2
    else if (v % cur == 0) divcnt(v, cnt + 1, cur + 1, v / cur)
    else divcnt(v, cnt, cur + 1, limit)

  def run = println(tri().filter(divcnt(_) > 500).take(1))

}
